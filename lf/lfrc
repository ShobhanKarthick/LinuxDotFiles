set shell sh
set drawbox on
set shellopts '-eu'
set ifs "\n"
set filesep "\n"
set scrolloff 10
# set icons on

# Nested Instance Warning
%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"


# Option '-f' disables pathname expansion which can be useful when $f, $fs, and

# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.

###############################################################
######################## Functions ############################
###############################################################

# Opening files
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd open-with %"$@" $fx

# Creating files and folders
cmd mkdir %mkdir "$@"

# Renaming files
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd rename-filename ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename"
}}

cmd rename-before ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won't deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename<a-b><c-b>"
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new")" -ne "$(wc -l "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# Deleting files
%mkdir -p ~/.trash
cmd trash %set -f; mv $fx ~/.trash
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# Yanking Paths to clipboard
cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Reinitialise

map <enter> 
map w
map r
map a
map c
map d
map y
map p
map e
map m

# use enter for shell commands
map s  shell
map cl clear

map cd push :cd<space>

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map mkd push :mkdir<space>

map cc push :rename<space>
map cw rename-filename
map a  rename-before

map dT trash
map D  delete

map dd cut
map yy copy

map yp yank-path
map yd yank-dirname
map yb yank-basename

map pp paste

map ee $$EDITOR "$f"
map ` push :open-with<space>

map dif cd "/mnt/LocalDisk"
map dig cd "/mnt/LocalDisk1"
map dih cd "/mnt/LocalDisk2"



